<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>MC_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Variables

grav = 0.9;
hsp = 0;
vsp = 0;
jumpspeed = 15;
jump_number = 2;
jump_current = 0;
movespeed = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);
key_down = keyboard_check(vk_down);

//React to inputs
move = key_left + key_right;
hsp = move * movespeed;

if (global.Convo = true)
{
    move = 0;
    hsp = 0;
}

if (key_down || place_meeting(x,y,obj_roof))
{
    key_down = true;
}

if(key_jump &amp;&amp; jump_current &gt; 0)
{
    vsp = key_jump * -jumpspeed;
    jump_current--;
}

//Gravity maximum speed
if(vsp &lt; 20)
{
    vsp += grav;
}

//Horizontal Collision
if (place_meeting(x+hsp, y, obj_wall))
{
    while(!place_meeting(x+sign(hsp), y, obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

//Vertical Collision
if (place_meeting(x, y+vsp, obj_wall))
{
    while(!place_meeting(x, y+sign(vsp), obj_wall))
    {
        y += sign(vsp);
    } 
    if(vsp &gt; 0)
    {
        jump_current = jump_number;
    }
    vsp = 0;
}
//Horizontal Collision to roofs
if (place_meeting(x+hsp, y, obj_roof))
{
    while(!place_meeting(x+sign(hsp), y, obj_roof))
    {
        x += sign(hsp);
    }
    hsp = 0;
}

//Vertical Collision to roofs
if (place_meeting(x, y+vsp, obj_roof) &amp;&amp; !key_down)
{
    while(!place_meeting(x, y+sign(vsp), obj_roof))
    {
        y += sign(vsp);
    }    
    if(vsp &gt; 0)
    {
        jump_current = jump_number;
    }
    vsp = 0;
}
// If the key_down is being pressed, the character should fall
else if(place_meeting(x, y+vsp, obj_roof) &amp;&amp; key_down)
{
    vsp = key_down * jumpspeed-3;
}

//Changing Animations
if(hsp == 0)
{
    sprite_index = MC_idle;
}
else
{
    sprite_index = MC_walk;
}
//Changing animation Orientation
if(move &lt; 0)
{   
    image_xscale = -1;
}

else if(move &gt; 0)
{
    image_xscale = 1;
}

x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
